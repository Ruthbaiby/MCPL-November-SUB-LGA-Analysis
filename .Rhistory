ui <- fluidPage(
  titlePanel("Customer Locations in Nigeria"),
  # Sidebar for filters
  sidebarLayout(
    sidebarPanel(
      selectInput("brand_filter", "Select Brand:", 
                  choices = c("All", unique(customer_data$Brand))),
      selectInput("lga_filter", "Select Local Government Area:", 
                  choices = c("All", unique(customer_data$LGA))),
      selectInput("branch_filter", "Select Branch:", 
                  choices = c("All", unique(customer_data$Branch))),
      actionButton("apply_filters", "Apply Filters")
    ),
    # Main panel for map
    mainPanel(
      leafletOutput("map", height = 600)
    )
  )
)
server <- function(input, output, session) {
  # Reactive data based on filters
  filtered_data <- reactive({
    req(input$apply_filters)
    data <- customer_data
    if (input$brand_filter != "All") {
      data <- data %>% filter(Brand == input$brand_filter)
    }
    if (input$lga_filter != "All") {
      data <- data %>% filter(LGA == input$lga_filter)
    }
    if (input$branch_filter != "All") {
      data <- data %>% filter(Branch == input$branch_filter)
    }
    data
  })
output$map <- renderLeaflet({
    leaflet() %>%
      addTiles() %>%
      setView(lng = 8.6753, lat = 9.0820, zoom = 4)  # Center map on Nigeria
  })
observeEvent(filtered_data(), {
    data <- filtered_data()
leafletProxy("map") %>%
      clearMarkers() %>%
      addCircleMarkers(
        data = data,
        lng = ~LONGITUDE,
        lat = ~LATITUDE,
        popup = ~paste("<strong>Brand:</strong>", Brand, 
                       "<br><strong>Branch:</strong>", Branch, 
                       "<br><strong>LGA:</strong>", LGA),
        radius = 5,
        color = "blue",
        stroke = FALSE,
        fillOpacity = 0.8
      )
  })
}
shinyApp(ui, server)
install.packages("mapview")
library(shiny)
library(leaflet)
library(dplyr)
ui <- fluidPage(
  titlePanel("Customer Locations in Nigeria"),
  sidebarLayout(
    sidebarPanel(
      selectInput("brand_filter", "Select Brand:", 
                  choices = c("All", unique(customer_data$Brand))),
      selectInput("lga_filter", "Select Local Government Area:", 
                  choices = c("All", unique(customer_data$LGA))),
      selectInput("branch_filter", "Select Branch:", 
                  choices = c("All", unique(customer_data$Branch))),
      actionButton("apply_filters", "Apply Filters"),
      downloadButton("download_map", "Download Map")
    ),
    mainPanel(
      leafletOutput("map", height = 600)
    )
  )
)
library(mapview)
server <- function(input, output, session) {
  # Reactive data based on filters
  filtered_data <- reactive({
    req(input$apply_filters)
    data <- customer_data
    if (input$brand_filter != "All") {
      data <- data %>% filter(Brand == input$brand_filter)
    }
    if (input$lga_filter != "All") {
      data <- data %>% filter(LGA == input$lga_filter)
    }
    if (input$branch_filter != "All") {
      data <- data %>% filter(Branch == input$branch_filter)
    }
    data
  })
output$map <- renderLeaflet({
    leaflet() %>%
      addTiles() %>%
      setView(lng = 8.6753, lat = 9.0820, zoom = 4)  # Center map on Nigeria
  })
 observeEvent(filtered_data(), {
    data <- filtered_data()
    leafletProxy("map") %>%
      clearMarkers() %>%
      addCircleMarkers(
        data = data,
        lng = ~LONGITUDE,
        lat = ~LATITUDE,
        popup = ~paste("<strong>Brand:</strong>", Brand, 
                       "<br><strong>Branch:</strong>", Branch, 
                       "<br><strong>LGA:</strong>", LGA),
        radius = 5,
        color = "blue",
        stroke = FALSE,
        fillOpacity = 0.8
      )
  })
output$download_map <- downloadHandler(
    filename = function() {
      paste("Customer_Locations_Map", Sys.Date(), ".png", sep = "")
    },
    content = function(file) {
      # Capture the current map and save as PNG
      mapshot(leafletOutput("map"), file = file)
    }
  )
}
shinyApp(ui = ui, server = server)
nigeria_map <- leaflet() %>%
  addTiles() %>%
  setView(lng = 8.6753, lat = 9.0820, zoom = 6)  # Coordinates for Nigeria
# Display the map
nigeria_map
# Save the map as an image
save.image("C:\\Users\\ruth.olusanya\\OneDrive - Tolaram Pte Ltd\\Documents\\Cust Cnt")
q()
library(readxl)
library(dplyr)
file_path <- ""C:/Users/ruth.olusanya/Downloads/SUB LGA Analysis.xlsx""  # Replace with your file path
customer_data <- read_excel(file_path, sheet = "BILLED")
file_path <- "C:/Users/ruth.olusanya/Downloads/SUB LGA Analysis.xlsx""  # Replace with your file path
customer_data <- read_excel(file_path, sheet = "BILLED")
file_path <- "C:/Users/ruth.olusanya/Downloads/SUB LGA Analysis.xlsx"  # Replace with your file path
customer_data <- read_excel(file_path, sheet = "BILLED")
file_path <- "C:/Users/ruth.olusanya/Downloads/SUB LGA Analysis.xlsx"
customer_data <- read_excel(file_path, sheet = "BILLED")
head(customer_data)
library(shiny)
library(leaflet)
library(dplyr)
ui <- fluidPage(
  titlePanel("November MCPL Customers Locations in Nigeria"),
  # Sidebar for filters
  sidebarLayout(
    sidebarPanel(
      selectInput("brand_filter", "Select Brand:", 
                  choices = c("All", unique(customer_data$Brand))),
      selectInput("lga_filter", "Select Local Government Area:", 
                  choices = c("All", unique(customer_data$LGA))),
      selectInput("branch_filter", "Select Branch:", 
                  choices = c("All", unique(customer_data$Branch))),
      actionButton("apply_filters", "Apply Filters")
    ),
    # Main panel for map
    mainPanel(
      leafletOutput("map", height = 600)
    )
  )
)
server <- function(input, output, session) {
  # Reactive data based on filters
  filtered_data <- reactive({
    req(input$apply_filters)
    data <- customer_data
    if (input$brand_filter != "All") {
      data <- data %>% filter(Brand == input$brand_filter)
    }
    if (input$lga_filter != "All") {
      data <- data %>% filter(LGA == input$lga_filter)
    }
    if (input$branch_filter != "All") {
      data <- data %>% filter(Branch == input$branch_filter)
    }
    data
  })ui <- fluidPage(
  titlePanel("November MCPL Customer Locations in Nigeria")
ui <- fluidPage(
  titlePanel("November MCPL Customer Locations in Nigeria")
sidebarLayout(
    sidebarPanel(
      selectInput("brand_filter", "Select Brand:", 
                  choices = c("All", unique(customer_data$Brand))),
      selectInput("lga_filter", "Select Local Government Area:", 
                  choices = c("All", unique(customer_data$LGA))),
      selectInput("branch_filter", "Select Branch:", 
                  choices = c("All", unique(customer_data$Branch))),
      actionButton("apply_filters", "Apply Filters")
    ),
mainPanel(
      leafletOutput("map", height = 600)
    )
  )
)  sidebarLayout(
    sidebarPanel(
      selectInput("brand_filter", "Select Brand:", 
                  choices = c("All", unique(customer_data$Brand))),
      selectInput("lga_filter", "Select Local Government Area:", 
                  choices = c("All", unique(customer_data$LGA))),
      selectInput("branch_filter", "Select Branch:", 
                  choices = c("All", unique(customer_data$Branch))),
      actionButton("apply_filters", "Apply Filters")
    ),
    # Main panel for map
    mainPanel(
      leafletOutput("map", height = 600)
    )
  )
)sidebarLayout(
    sidebarPanel(
      selectInput("brand_filter", "Select Brand:", 
                  choices = c("All", unique(customer_data$Brand))),
      selectInput("lga_filter", "Select Local Government Area:", 
                  choices = c("All", unique(customer_data$LGA))),
      selectInput("branch_filter", "Select Branch:", 
                  choices = c("All", unique(customer_data$Branch))),
      actionButton("apply_filters", "Apply Filters")
    ),
    # Main panel for map
    mainPanel(
      leafletOutput("map", height = 600)
    )
sidebarLayout(
    sidebarPanel(
      selectInput("brand_filter", "Select Brand:", 
                  choices = c("All", unique(customer_data$Brand))),
      selectInput("lga_filter", "Select Local Government Area:", 
                  choices = c("All", unique(customer_data$LGA))),
      selectInput("branch_filter", "Select Branch:", 
                  choices = c("All", unique(customer_data$Branch))),
      actionButton("apply_filters", "Apply Filters")
    ),
    # Main panel for map
    mainPanel(
      leafletOutput("map", height = 600)
    )
)
)
sidebarLayout(
    sidebarPanel(
      selectInput("brand_filter", "Select Brand:", 
                  choices = c("All", unique(customer_data$Brand))),
      selectInput("lga_filter", "Select Local Government Area:", 
                  choices = c("All", unique(customer_data$LGA))),
      selectInput("branch_filter", "Select Branch:", 
                  choices = c("All", unique(customer_data$Branch))),
      actionButton("apply_filters", "Apply Filters")
    ),
    # Main panel for map
    mainPanel(
      leafletOutput("map", height = 600)
    )
  )
)
server <- function(input, output, session) {
  # Reactive data based on filters
  filtered_data <- reactive({
    req(input$apply_filters)
    data <- customer_data
    if (input$brand_filter != "All") {
      data <- data %>% filter(Brand == input$brand_filter)
    }
    if (input$lga_filter != "All") {
      data <- data %>% filter(LGA == input$lga_filter)
    }
    if (input$branch_filter != "All") {
      data <- data %>% filter(Branch == input$branch_filter)
    }
    data
  })
)
nigeria_map <- leaflet(customer_data) %>%
  addTiles() %>%  # Add default OpenStreetMap tiles
  setView(lng = 8.6753, lat = 9.0820, zoom = 6) %>%  # Center map on Nigeria
  addCircleMarkers(
    lng = ~LONGITUDE,
    lat = ~LATITUDE,
    popup = ~paste("<strong>Brand:</strong>", Brand, 
                   "<br><strong>Branch:</strong>", Branch, 
                   "<br><strong>LGA:</strong>", LGA),
    radius = 5,
    color = "blue",
    stroke = FALSE,
    fillOpacity = 0.7
  )
nigeria_map
nigeria_map <- leaflet() %>%
  addTiles() %>%
  setView(lng = 8.6753, lat = 9.0820, zoom = 6)  # Coordinates for Nigeria
nigeria_map
ui <- fluidPage(
  titlePanel("Customer Locations in Nigeria"),
  sidebarLayout(
    sidebarPanel(
      selectInput("brand_filter", "Select Brand:", 
                  choices = c("All", unique(customer_data$Brand))),
      selectInput("lga_filter", "Select Local Government Area:", 
                  choices = c("All", unique(customer_data$LGA))),
      selectInput("branch_filter", "Select Branch:", 
                  choices = c("All", unique(customer_data$Branch))),
      actionButton("apply_filters", "Apply Filters"),
      downloadButton("download_map", "Download Map")
    ),
    mainPanel(
      leafletOutput("map", height = 600)
    )
  )
)
library(mapview)
server <- function(input, output, session) {
  # Reactive data based on filters
  filtered_data <- reactive({
    req(input$apply_filters)
    data <- customer_data
    if (input$brand_filter != "All") {
      data <- data %>% filter(Brand == input$brand_filter)
    }
    if (input$lga_filter != "All") {
      data <- data %>% filter(LGA == input$lga_filter)
    }
    if (input$branch_filter != "All") {
      data <- data %>% filter(Branch == input$branch_filter)
    }
    data
  })
output$map <- renderLeaflet({
    leaflet() %>%
      addTiles() %>%
      setView(lng = 8.6753, lat = 9.0820, zoom = 4)  # Center map on Nigeria
  })
observeEvent(filtered_data(), {
    data <- filtered_data()
    leafletProxy("map") %>%
      clearMarkers() %>%
      addCircleMarkers(
        data = data,
        lng = ~LONGITUDE,
        lat = ~LATITUDE,
        popup = ~paste("<strong>Brand:</strong>", Brand, 
                       "<br><strong>Branch:</strong>", Branch, 
                       "<br><strong>LGA:</strong>", LGA),
        radius = 5,
        color = "blue",
        stroke = FALSE,
        fillOpacity = 0.8
      )
  })
output$download_map <- downloadHandler(
    filename = function() {
      paste("Customer_Locations_Map", Sys.Date(), ".png", sep = "")
    },
    content = function(file) {
      # Capture the current map and save as PNG
      mapshot(leafletOutput("map"), file = file)
    }
  )
}
shinyApp(ui = ui, server = server)
save.image("C:\\Users\\ruth.olusanya\\OneDrive - Tolaram Pte Ltd\\Documents\\SUB LGA Analysis")
nigeria_map <- leaflet(customer_data) %>%
+   addTiles() %>%  # Add default OpenStreetMap tiles
+   setView(lng = 8.6753, lat = 9.0820, zoom = 6) %>%  # Center map on Nigeria
+   addCircleMarkers(
+     lng = ~LONGITUDE,
+     lat = ~LATITUDE,
+     popup = ~paste("<strong>Brand:</strong>", Brand, 
+                    "<br><strong>Branch:</strong>", Branch, 
+                    "<br><strong>LGA:</strong>", LGA),
+     radius = 5,
+     color = "blue",
+     stroke = FALSE,
+     fillOpacity = 0.7
+   )
> nigeria_map
> nigeria_map <- leaflet() %>%
+   addTiles() %>%
+   setView(lng = 8.6753, lat = 9.0820, zoom = 6)  # Coordinates for Nigeria
> nigeria_map
> ui <- fluidPage(
+   titlePanel("Customer Locations in Nigeria"),
+   sidebarLayout(
+     sidebarPanel(
+       selectInput("brand_filter", "Select Brand:", 
+                   choices = c("All", unique(customer_data$Brand))),
+       selectInput("lga_filter", "Select Local Government Area:", 
+                   choices = c("All", unique(customer_data$LGA))),
+       selectInput("branch_filter", "Select Branch:", 
+                   choices = c("All", unique(customer_data$Branch))),
+       actionButton("apply_filters", "Apply Filters"),
+       downloadButton("download_map", "Download Map")
+     ),
+     mainPanel(
+       leafletOutput("map", height = 600)
+     )
+   )
+ )
> library(mapview)
GDAL version >= 3.1.0 | setting mapviewOptions(fgb = TRUE)
> 
> server <- function(input, output, session) {
+   # Reactive data based on filters
+   filtered_data <- reactive({
+     req(input$apply_filters)
+     data <- customer_data
+     if (input$brand_filter != "All") {
+       data <- data %>% filter(Brand == input$brand_filter)
+     }
+     if (input$lga_filter != "All") {
+       data <- data %>% filter(LGA == input$lga_filter)
+     }
+     if (input$branch_filter != "All") {
+       data <- data %>% filter(Branch == input$branch_filter)
+     }
+     data
+   })
+ 
+ output$map <- renderLeaflet({
+     leaflet() %>%
+       addTiles() %>%
+       setView(lng = 8.6753, lat = 9.0820, zoom = 4)  # Center map on Nigeria
+   })
+ observeEvent(filtered_data(), {
+     data <- filtered_data()
+     leafletProxy("map") %>%
+       clearMarkers() %>%
+       addCircleMarkers(
+         data = data,
+         lng = ~LONGITUDE,
+         lat = ~LATITUDE,
+         popup = ~paste("<strong>Brand:</strong>", Brand, 
+                        "<br><strong>Branch:</strong>", Branch, 
+                        "<br><strong>LGA:</strong>", LGA),
+         radius = 5,
+         color = "blue",
+         stroke = FALSE,
+         fillOpacity = 0.8
+       )
+   })
+ output$download_map <- downloadHandler(
+     filename = function() {
+       paste("Customer_Locations_Map", Sys.Date(), ".png", sep = "")
+     },
+     content = function(file) {
+       # Capture the current map and save as PNG
+       mapshot(leafletOutput("map"), file = file)
+     }
+   )
+ }
> shinyApp(ui = ui, server = server)
library(mapview)
server <- function(input, output, session) {
  # Reactive data based on filters
  filtered_data <- reactive({
    req(input$apply_filters)
    data <- customer_data
    if (input$brand_filter != "All") {
      data <- data %>% filter(Brand == input$brand_filter)
    }
    if (input$lga_filter != "All") {
      data <- data %>% filter(LGA == input$lga_filter)
    }
    if (input$branch_filter != "All") {
      data <- data %>% filter(Branch == input$branch_filter)
    }
    data
  })
output$map <- renderLeaflet({
    leaflet() %>%
      addTiles() %>%
      setView(lng = 8.6753, lat = 9.0820, zoom = 4)  # Center map on Nigeria
  })
observeEvent(filtered_data(), {
    data <- filtered_data()
    leafletProxy("map") %>%
      clearMarkers() %>%
      addCircleMarkers(
        data = data,
        lng = ~LONGITUDE,
        lat = ~LATITUDE,
        popup = ~paste("<strong>Brand:</strong>", Brand, 
                       "<br><strong>Branch:</strong>", Branch, 
                       "<br><strong>LGA:</strong>", LGA),
        radius = 5,
        color = "blue",
        stroke = FALSE,
        fillOpacity = 0.8
      )
  })
output$download_map <- downloadHandler(
    filename = function() {
      paste("Customer_Locations_Map", Sys.Date(), ".png", sep = "")
    },
    content = function(file) {
      # Capture the current map and save as PNG
      mapshot(leafletOutput("map"), file = file)
    }
  )
}
shinyApp(ui = ui, server = server)
q()
